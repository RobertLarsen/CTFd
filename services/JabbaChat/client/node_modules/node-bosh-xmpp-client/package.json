{
  "name": "node-bosh-xmpp-client",
  "version": "0.1.4",
  "description": "XMPP clients that connects via BOSH",
  "author": {
    "name": "Original code by Anoop Chaurasiya. Bugfixes and improvements by Eelco Cramer"
  },
  "keywords": [
    "xmpp",
    "bosh",
    "http",
    "jabber"
  ],
  "dependencies": {
    "node-expat": ">=1.2.0",
    "ltx": ">= 0.0.4"
  },
  "repositories": {
    "type": "git",
    "path": "https://github.com/eelcocramer/node-xmpp-via-bosh"
  },
  "homepage": "https://github.com/eelcocramer/node-xmpp-via-bosh",
  "bugs": "https://github.com/eelcocramer/node-xmpp-via-bosh/issues",
  "maintainers": [
    {
      "name": "Eelco Cramer",
      "email": "eelco.cramer@gmail.com"
    }
  ],
  "engines": {
    "node": ">=0.4.0"
  },
  "main": "./lib/boshclient.js",
  "readme": "# node-bosh-xmpp #\n\n## Motivation ##\n\nAre you using [node-xmpp](https://github.com/astro/node-xmpp) for XMPP? But get blocked by coorperate firewalls? Then\n[node-bosh-xmpp](https://github.com/eelcocramer/node-xmpp-via-bosh) is API compatible with [node-xmpp](https://github.com/astro/node-xmpp)\nand gives you the ability to use XMPP over a standard HTTP port.\n\n## Credits go to Anoopc ##\n\nI was looking for a BOSH XMPP client for node and came accross Anoop's [node-xmpp-via-bosh](https://github.com/anoopc/node-xmpp-via-bosh) implementation.\nHis code was not completely working for me so I forked his code and fixed the issue I was having. I wanted to be able to specify\nthe URL of the BOSH server and I also had some issues with the authorization proces.\n\n## Installation instructions ##\n\n\tnpm install node-bosh-xmpp-client\n\n## Code instructions ##\n\nFollowing you will find the documentation from Anoop which I updated to reflect my changes:\n\nIt is inspired by node-xmpp (https://github.com/astro/node-xmpp) and xmppjs(http://github.com/mwild1/xmppjs) and\nit is API compatible with node-xmpp (except for the constructor).\n\nIt is an xmpp library which lets you establish a persistent session to xmpp server \nvia a bosh-server and communicate willingly.\n\n## Documentation for API ##\n\n* Constructor: `Client(jid, password, bosh, route)`  \n\t\t\n\t\tParameters:  \n\t\t\n            *jid*       : [String] jabber id of user (e.g. `user@example.com/office`)  \n            *password*  : [String] password  \n            *bosh*      : [String] url of the bosh-server (e.g. `http://localhost:5280/http-bind/`)  \n            *route*     : [String] route attribute [if used] for connecting to xmpp server  \n        Return Value:  \n\n            new Client Object having following properties:  \n\n\t1. Event-emitter for the following events\n\t\n\t\t`online`\n\t\t\tEvent-listener: `function callback()`\n\t\n\t\t`error`\n\t\t\tEvent-listener: `function callback(exception)`\n\t\t\t\n\t\t\t`exception[String]` is the description of error\n\n\t\t`offline`\n\t\t\tEvent-listener: `function callback(condition)`\n\t\t\t\t\t  \n\t\t\t`condition[String]` is the description of reason for being offline\n\n\t\t`stanza`\n\t\t\tEvent-listener: `function callback(stanza)`\n\t\t\t\n\t\t\t`stanza[Object]` is the ltx xml element. \n\n\t2. Function: `send(stanza)`\n\t\t\n\t\tenqueues the stanza into the pending array to be sent to bosh-server on next Tick\n\t\tparameters:\n\t\t\n\t\t\t*stanza* : [Object] ltx xml Element object\n\n\t3. Function: `sendMessage(to, body, type = \"chat\")`\n\t    \n\t\tsends a message 'body' to jid 'to' with type set to 'type'\n\t\t\n\t\tparameters:\n\n\t\t\t*to*   : [String] jid of receiver(e.g. `myfriend@example.com/home`)\n\t\t\t*body* : [String] message to be sent\n\t\t\t*type* : [String] should only be among the permitted values of `type` for xmpp message stanza\n\n\t4. Function: `disconnect()`\n\t\n\t\tsends immediately any pending stanzas, ends the stream by sending terminate packet.\n\n* Constructor `Element(xname, attrs)`\n\n\t\talias to `ltx.Element` Constructor\n\n* Function: `$build(xname, attrs)`\n\n\t\tan alias for `new ltx.Element(xname, attrs)`\n\t\t\n\t\tParameters:\n\t\t\n\t\t\t*xname* : [string] name for the xml element\n\t\t\t*attrs* : [Object] containing all the attributes to set up\n\t\t\t\n\t\tReturn value:\n\t\t\n\t\t\ta new ltx.Element object\n\n* Function: `$msg(attrs)`\n\n\t\tan alias for `new ltx.Element(\"message\", attrs)`\n\t\t\n\t\tParameters:\n\t\t\n\t\t\t*attrs* : [Object] containing all the attributes to set up\n\t\t\t\n\t\tReturn value:\n\t\t\n\t\t\ta new ltx.Element object\n\n* Function: `$iq(attrs)`\n\n\t\tan alias for `new ltx.Element(\"iq\", attrs)`\n\t\t\n\t\tParameters:\n\t\t\n\t\t\tattrs : [Object] containing all the attributes to set up\n\t\t\t\n\t\tReturn value:\n\t\t\n\t\t\ta new ltx.Element object\n \n* Function: `$pres(attrs)`\n\n\t\tan alias for `new ltx.Element(\"presence\", attrs)`\n\t\t\n\t\tParameters:\n\t\t\n\t\t\t*attrs* : [Object] containing all the attributes to set up\n\t\t\t\n\t\tReturn value:\n\t\t\n\t\t\ta new ltx.Element object\n\n* Function: `setLogLevel(logLevel)`\n\n\t\tsets the logLevel for module (use only when in serious problem i.e. debug mode).\n\t\t\n\t\tParameters:\n\t\t\n\t\t\t*logLevel* : [String] permissible values:\n\t\t\t\n\t\t\t       *FATAL*\t:\tdisplays nothing [default]\n\t\t\t\t   *ERROR*\t:\tdisplays error messages\n\t\t\t\t   *INFO*\t:\tinforms about important events\n\t\t\t\t   *DEBUG*\t:\tprints each packet sent and received\n\n## Shout outs ##\n\nShout outs go to the [Webinos project](http://www.webinos.org). They provided the time and need to make this fix.\n",
  "readmeFilename": "README.markdown",
  "_id": "node-bosh-xmpp-client@0.1.4",
  "_from": "node-bosh-xmpp-client@0.1.4"
}
