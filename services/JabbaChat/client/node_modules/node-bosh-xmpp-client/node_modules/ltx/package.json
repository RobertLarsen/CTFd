{
  "name": "ltx",
  "version": "0.3.1",
  "main": "./lib/index",
  "browserify": "./lib/index-browserify.js",
  "description": "<xml for=\"node.js\" browserify=\"too\">",
  "author": {
    "name": "Astro"
  },
  "dependencies": {
    "node-expat": ">=1.2.0",
    "sax": ">=0.3.5"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/astro/ltx.git"
  },
  "homepage": "http://github.com/astro/ltx",
  "bugs": {
    "url": "http://github.com/astro/ltx/issues"
  },
  "maintainers": [
    {
      "name": "Astro",
      "email": "astro@spaceboyz.net",
      "url": "http://spaceboyz.net/~astro/"
    },
    {
      "name": "Lloyd Watkin",
      "email": "lloyd@evilprofessor.co.uk",
      "url": "http://www.evilprofessor.co.uk"
    }
  ],
  "contributors": [
    {
      "name": "Stephan Maka"
    },
    {
      "name": "Will Fife"
    },
    {
      "name": "Markus Kohlhase"
    }
  ],
  "licenses": [
    {
      "type": "MIT"
    }
  ],
  "engine": "node",
  "devDependencies": {
    "vows": ">=0.5.12",
    "easysax": ">=0.1.7",
    "node-xml": ">=1.0.1",
    "Strophe.js": "https://github.com/metajack/strophejs/tarball/master",
    "request-animation-frame": ">=0.1.0",
    "browserify": ">=1.10.4"
  },
  "scripts": {
    "test": "vows --spec"
  },
  "readme": "# Less-Than XML\n\n* *Element:* any XML Element\n* Text nodes are Strings\n* Runs on node.js and browserify\n\n## Build status\n\n[![Build Status](https://secure.travis-ci.org/astro/ltx.png)](http://travis-ci.org/astro/ltx)\n\n## Parsing\n\n### DOM\n\nParse a little document at once:\n\n    el = ltx.parse(\"<document/>\")\n\nPush parser:\n\n\tp = new ltx.Parser();\n\tp.on('tree', function(tree) {\n\t\tproceed(null, tree);\n\t});\n\tp.on('error', function(error) {\n\t\tproceed(error);\n\t});\n\n### SAX\n\nltx implements multiple SAX backends:\n\n* *node-expat*: libexpat binding\n* *ltx*: fast native-JavaScript parser without error handling\n* *saxjs*: native-JavaScript parser\n\nIf present, they are available through\n`ltx.availableSaxParsers`. Mostly, you'll want to do:\n\n    parser = new ltx.bestSaxParser();\n\nRefer to `lib/parse.js` for the interface.\n\n\n## Element traversal\n\n* `is(name, xmlns?)`: check\n* `getName()`: name without ns prefix\n* `getNS()`: element's xmlns, respects prefixes and searches upwards\n* `findNS(prefix?)`: search for xmlns of a prefix upwards\n* `getChild(name, xmlns?)`: find first child\n* `getChildren(name, xmlns?)`: find all children\n* `getChildByAttr(attr, value, xmlns?, recursive?)`: find first child by a specific attribute\n* `getChildrenByAttr(attr, value, xmlns?, recursive?)`: find all children by a specific attribute\n* `getChildrenByFilter(filter, recursive?)`: find all children by a custom filter function\n* `getText()`: appends all text nodes recursively\n* `getChildText(name)`: a child's text contents\n* `root()`: uppermost parent in the tree\n* `up()`: parent or self\n\n\n## Element attributes\n\n* `attrs` is an object of the Element's attributes\n* `name` contains optional prefix, colon, name\n* `parent` points to its parent, this should always be consistent with\n  children\n* `children` is an Array of Strings and Elements\n\n## Modifying XML Elements\n\n* `new Element(name, attrs?)`: constructor\n* `remove(child)`: remove child by reference\n* `remove(name, xmlns)`: remove child by tag name and xmlns\n* `attr(attrName, value?)`: modify or get an attribute's value\n* `text(value?)`: modify or get the inner text\n* `clone()`: clones an element that is detached from the document\n\n## Building XML Elements\n\n    el = new ltx.Element('root').\n\t\tc('children');\n\tel.c('child', { age: 5 }).t('Hello').up()\n\t  .c('child', { age: 7 }).t('Hello').up()\n\t  .c('child', { age: 99 }).t('Hello').up()\n\tconsole.log(\"Serialized document:\", el.root().toString());\n\nThis resembles Strophejs a bit.\n\nstrophejs' XML Builder is very convenient for producing XMPP\nstanzas. node-xmpp includes it in a much more primitive way: the\n`c()`, `cnode()` and `t()` methods can be called on any *Element*\nobject, returning the child element.\n\nThis can be confusing: in the end, you will hold the last-added child\nuntil you use `up()`, a getter for the parent. `Connection.send()`\nfirst invokes `tree()` to retrieve the uppermost parent, the XMPP\nstanza, before sending it out the wire.\n\n\n## Destructive manipulation\n\nPlease always make sure `parent` and `children` are consistent. Don't\nappend children of other parents to your own element. We're not\nadoption-safe!\n\n\n## TODO\n\n* More documentation\n* More tests (Using [Vows](http://vowsjs.org/))\n\n",
  "readmeFilename": "README.markdown",
  "_id": "ltx@0.3.1",
  "dist": {
    "shasum": "a751b45a226d1cba5265c1abe606ed714e0b9199"
  },
  "_from": "ltx@0.3.1",
  "_resolved": "https://registry.npmjs.org/ltx/-/ltx-0.3.1.tgz"
}
