{
  "name": "node-expat",
  "version": "2.0.0",
  "main": "./lib/node-expat",
  "description": "NodeJS binding for fast XML parsing.",
  "keywords": [
    "xml",
    "sax",
    "expat",
    "libexpat",
    "parse",
    "parsing"
  ],
  "scripts": {
    "test": "vows --spec ./test.js",
    "install": "node-gyp rebuild"
  },
  "dependencies": {},
  "devDependencies": {
    "vows": ">=0.5.12"
  },
  "repository": {
    "type": "git",
    "path": "git://github.com/astro/node-expat.git"
  },
  "homepage": "http://github.com/astro/node-expat",
  "bugs": "http://github.com/astro/node-expat/issues",
  "author": {
    "name": "Astro",
    "email": "astro@spaceboyz.net",
    "url": "http://spaceboyz.net/~astro/"
  },
  "contributors": [
    {
      "name": "Stephan Maka"
    },
    {
      "name": "Derek Hammer"
    },
    {
      "name": "Iein Valdez"
    },
    {
      "name": "Peter KÃ¶rner"
    },
    {
      "name": "Camilo Aguilar"
    },
    {
      "name": "Michael Weibel"
    },
    {
      "name": "Alexey Zhuchkov"
    },
    {
      "name": "Satyam Shekhar"
    },
    {
      "name": "Dhruv Matani"
    },
    {
      "name": "Andreas Botsikas"
    },
    {
      "name": "Tom Hughes-Croucher"
    },
    {
      "name": "Nathan Rajlich"
    }
  ],
  "licenses": [
    {
      "type": "MIT"
    }
  ],
  "engines": {
    "node": ">=0.4"
  },
  "gypfile": true,
  "readme": "# node-expat #\n\n## Motivation ##\n\nYou use [node.js](http://github.com/ry/node) for speed? You process\nXML streams? Then you want the fastest XML parser: [libexpat](http://expat.sourceforge.net/)!\n\n## Speed ##\n\nA stupid speed test is supplied in `bench.js`. We measure how many\n25-byte elements a SAX parser can process:\n\n- [node-xml](http://github.com/robrighter/node-xml) (pure JavaScript): 23,000 el/s\n- [libxmljs](http://github.com/polotek/libxmljs) (libxml2 binding): 77,000 el/s\n- [node-expat](http://github.com/astro/node-expat) (libexpat binding, this): 113,000 el/s\n\nThese numbers were recorded on a Core 2 2400 MHz.\n\n## Instructions ##\n\nInstall node-expat:\n\n    npm i node-expat\n\n## Usage ##\n\nImportant events emitted by a parser:\n\n- *startElement* with `name, attrs`\n- *endElement* with `name`\n- *text* with `string`\n\nThere are more. Use `test.js` for reference.\n\nIt's possible to stop and resume the parser from within element handlers using the parsers \nstop() and resume() methods.\n\n## Error handling ##\n\nWe don't emit an error event because libexpat doesn't use a callback\neither. Instead, check that `parse()` returns `true`. A descriptive\nstring can be obtained via `getError()` to provide user feedback.\n\nAlternatively, use the Parser like a node Stream. `write()` will emit\nerror events.\n\n## Namespace handling ##\n\nA word about special parsing of *xmlns:* this is not neccessary in a\nbare SAX parser like this, given that the DOM replacement you are\nusing (if any) is not relevant to the parser.\n",
  "readmeFilename": "README.markdown",
  "_id": "node-expat@2.0.0",
  "_from": "node-expat@>=1.2.0"
}
